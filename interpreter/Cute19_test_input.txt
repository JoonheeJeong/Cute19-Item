( define a + ) // 해결 필요

( car ( car ' ( ( 1 2 ) 3 ) ) )Z
1
( cons ( car ' ( ( 1 2 ) 3 ) ) ' ( 3 4 ) )

( define a ' ( ( 1 2 ) 3 ( 4 5 ) ) )
( car a )
'( 1 2 )
( cdr a )
'( 3 ( 4 5 ) )

*( car id )
( car a )
*( car quotedList )
( car ' ( 1 2 ) )
1
( car ' ( a 3 ) )
value of a
*( car NestedList ) // item 3
( car ( car ' ( ( 1 2 ) 3 ) ) )
1
( car ( car ' ( ( a ) 3 ) ) )
value a
( ( car ( car ' ( ( a ) 3 ) ) ) ' ( ( a ) ) ) // a == car
value of a => car

( cons a '( 6 7 ) )
' ( ( ( 1 2 ) 3 ( 4 5 ) ) 6 7 )
( cons ' ( ) ' ( ) )
'( ( ) )
( cons ' ( ) ' ( 1 ) )
'( ( ) 1 )

( define a ' ( ( 1 2 ) 3 ( 4 5 ) ) )
( define b ' ( ) )
( null? b )
#T
( null? ' ( ) )
#T
( null? ( car ' ( ( ) ) ) )
#T
( null? a )
#F
( null? ' b )
#F
( null? ( * 3 2 ) )
#F
( null? + )
#F
( null? 1 )
#F
( null? null? )
#F

( atom? ' c )
#T
( atom? 1 )
#T
( atom? #T )
#T
( atom? > )
#T
( atom? ( * 3 6 ) )
#T
( atom? b )
#T
( atom? atom? )
#T
( atom? ( car ' ( 1 2 ) ) )
#T
( atom? ( cdr ' ( 1 2 ) ) )
#F
( atom? a )
#F
( atom? ' ( 1 2 ) )
#F

( define a ' ( ( 1 2 ) 3 ( 4 5 ) ) )
( define b ' ( ) )
( define c ( * 2 4 ) )
( define d ( car ' ( 1 2 ) ) )
( define e ' ( 1 2 ) )
( define f + )
( eq? b ' ( ) )
#T
( eq? 'yes 'yes )
#T
( eq? ( * 6 7 ) 42 )
#T
( eq? #t #t )
#T
( eq? ' ( ) ' ( ) )
#T
( eq? b ' ( ) )
#T
( eq? c 8 )
#T
( eq? 8 8 )
#T
( eq? 'yes 'no )
#F
( eq? ' ( a b ) ' ( a b ) )
#F
( eq? ( car a ) ( car ' ( 1 7 8 ) ) )
#T
( eq? ( car e ) ( car ' ( 1 2 ) ) )
#T
( eq? ( car ( car a ) ) car ' ( 1 2 ) ) // 디버깅 필요 item 3
#T

( define a ( < 1 2 ) )
#T
( not a )
#F
-----------------------------
( not ( car ' ( #F a b 123 ) ) )
#T
( not ( = ( / 4 2 ) ( * 1 2 ) ) )
#F


( cond ( ( not ( atom? ' ( ) ) ) 1 ) ( ( < ( / 4 2 ) ( * 2 3 ) ) ( cons 1 ' ( 2 3 ) ) ) )

( cond ( ( = 3 ( / 18 6 ) ) ( cdr ' ( 2 ) ) ) ( ( eq? ' ( 1 a )  ' ( 1 a ) ) ' 1 ) )

( - ( / ( * ( + 1 2 ) ( * 3 4 ) ) ( - 5 6 ) ) ( / 7 ( + 8 ( - 9 10 ) ) ) )


( car ' ( 2 3 4 ) )

( car ' ( ( 2 3 ) ( 4 5 ) 6 ) )

( cdr ' ( 2 3 4 ) )

( cdr ' ( ( 2 3 ) ( 4 5 ) 6 ) )

( cdr ' ( 2 ) )

( cons 1 ' ( 2 3 4 ) )

( cons ' ( 2 3 ) ' ( 4 5 6 ) )

( cons 2 ' ( ) )

( null? ' ( ) )

( null? ' ( 1 2 ) )

( null? ' ( ( ) ) )

( atom? ' a )

( atom? ' ( 1 2 ) )

( atom? ' ( ) )

( eq? ' a ' a )

( eq? ' a ' b )

( eq? ' ( a b ) ' ( a b ) )

( + 1 2 )

( + ( + 1 2 ) 3 )

( > 1 5 )

( > ( + 9 3 ) 5 )

( not #F )

( not ( < 1 2 ) )

( cond ( ( < 1 2 ) 0 ) ( #T 1 ) )