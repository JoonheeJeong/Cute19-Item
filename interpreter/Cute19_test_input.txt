( define a + )

( car ( car ' ( ( 1 2 ) 3 ) ) )
1
( cons ( car ' ( ( 1 2 ) 3 ) ) ' ( 3 4 ) )

( define a ' ( ( 1 2 ) 3 ( 4 5 ) ) )
( car a )
'( 1 2 )
( cdr a )
'( 3 ( 4 5 ) )

*( car id )
( car a )
value of a

*( car quotedList )
( car ' ( 1 2 ) )
1
( car ' ( a 3 ) )
value of a

*( car NestedList ) // item 3
( car ( car ' ( ( 1 2 ) 3 ) ) )
1

( define a ' ( ( 1 2 ) 3 ( 4 5 ) ) )
( cons a '( 6 7 ) )
' ( ( ( 1 2 ) 3 ( 4 5 ) ) 6 7 )
( cons ' ( ) ' ( ) )
'( ( ) )
( cons ' ( ) ' ( 1 ) )
'( ( ) 1 )

( define a ' ( ( 1 2 ) 3 ( 4 5 ) ) )
( define b ' ( ) )
( null? b )
#T
( null? ' ( ) )
#T
( null? ( car ' ( ( ) ) ) )
#T
( null? a )
#F
( null? ' b )
#F
( null? ( * 3 2 ) )
#F
( null? + )
#F
( null? 1 )
#F
( null? null? )
#F

( atom? ' c )
#T
( atom? 1 )
#T
( atom? #T )
#T
( atom? > )
#T
( atom? ( * 3 6 ) )
#T
( atom? b )
#T
( atom? atom? )
#T
( atom? ( car ' ( 1 2 ) ) )
#T
( atom? ( cdr ' ( 1 2 ) ) )
#F
( atom? a )
#F
( atom? ' ( 1 2 ) )
#F

( define a ' ( ( 1 2 ) 3 ( 4 5 ) ) )
( define b ' ( ) )
( define c ( * 2 4 ) )
( define d ( car ' ( 1 2 ) ) )
( define e ' ( 1 2 ) )
( define f cond )
( define f + )
( eq? b ' ( ) )
#T
( eq? 'yes 'yes )
#T
( eq? ( * 6 7 ) 42 )
#T
( eq? #t #t )
#T
( eq? ' ( ) ' ( ) )
#T
( eq? b ' ( ) )
#T
( eq? c 8 )
#T
( eq? 8 8 )
#T
( eq? 'yes 'no )
#F
( eq? ' ( a b ) ' ( a b ) )
#F
( eq? ( car e ) ( car ' ( 1 7 8 ) ) )
#T
( eq? ( car e ) ( car ' ( 1 2 ) ) )
#T
( eq? ( car ( car a ) ) ( car e ) )
#T

( define a ( < 1 2 ) )
#T
( not a )
#F

( define a ( < 1 2 ) )
( define b ( cons 1 ' ( 2 3 ) ) )
( cond ( a b ) )
b => '( 1 2 3 )
-----------------------------
( not ( car ' ( #F a b 123 ) ) )
#T
( not ( = ( / 4 2 ) ( * 1 2 ) ) )
#F


( cond ( ( not ( atom? ' ( ) ) ) 1 ) ( ( < ( / 4 2 ) ( * 2 3 ) ) ( cons 1 ' ( 2 3 ) ) ) )
'( 1 2 3 )
( cond ( ( = 3 ( / 18 6 ) ) ( cdr ' ( 2 ) ) ) ( ( eq? ' ( 1 a )  ' ( 1 a ) ) ' 1 ) )
'( )
( - ( / ( * ( + 1 2 ) ( * 3 4 ) ) ( - 5 6 ) ) ( / 7 ( + 8 ( - 9 10 ) ) ) )


( car ' ( 2 3 4 ) )
2
( car ' ( ( 2 3 ) ( 4 5 ) 6 ) )
'( 2 3 )
( cdr ' ( 2 3 4 ) )
'( 3 4 )
( cdr ' ( ( 2 3 ) ( 4 5 ) 6 ) )
'( ( 4 5 ) 6 )
( cdr ' ( 2 ) )
'( )
( cons 1 ' ( 2 3 4 ) )
'( 1 2 3 4 )
( cons ' ( 2 3 ) ' ( 4 5 6 ) )
'( ( 2 3 ) 4 5 6 )
( cons 2 ' ( ) )
'( 2 )
( null? ' ( ) )
#T
( null? ' ( 1 2 ) )
#F
( null? ' ( ( ) ) )
#F
( atom? ' a )
#T
( atom? ' ( 1 2 ) )
#F
( atom? ' ( ) )
#T
( eq? ' a ' a )
#T
( eq? ' a ' b )
#F
( eq? ' ( a b ) ' ( a b ) )
#F
( + 1 2 )
3
( + ( + 1 2 ) 3 )
6
( > 1 5 )
#F
( > ( + 9 3 ) 5 )
#T
( not #F )
#T
( not ( < 1 2 ) )
#F
( cond ( ( > 1 2 ) 0 ) ( #T 1 ) )
1

( define a + )
( define b 1 )
( define c 3 )
( a b c )

( define a 0 )
( define b 1 )
( define c 2 )
( cond ( + a b c ) ( #T b ) )
( cond ( ( > 1 2 ) a ) )
( cond ( ( eq? a b ) a b c ) ( #T b ) )
( cond ( #F 3 ) ( ( 2 3 ) 4 ) )

( lambda ( x ) ( + 1 x ) )
( ( lambda ( x ) ( + 1 x ) ) 2 )
( define x 5 )
( define a 7 )
( define plusA ( lambda ( x ) ( + x a ) ) )

( define plus1 ( lambda ( x ) ( + x 1 ) ) )
( plus1 3 )
4
( define plus2 ( lambda ( x ) ( + ( plus1 x ) 1 ) ) )
( plus2 3 )
5
( define cube ( lambda ( n ) ( define sqrt ( lambda ( n ) ( * n n ) ) ) ( * ( sqrt n ) n ) ) )
( cube 3 )
27
( define lastItem ( lambda ( ls ) ( cond ( ( null? ( cdr ls ) ) ( car ls ) ) ( #T ( lastItem ( cdr ls ) ) ) ) ) )
( define d ' ( 운영체제및실습 웹프로그래밍 데이터통신 실전코딩 IT영어1 프로그래밍언어개론 ) )
( lastItem d )
'프로그래밍언어개론
( define a ( cons ' 전지원201602059 ' ( 정준희201602069 ) ) )
( define b ' TEAM7 )
( define c ( cons b a ) )



( car ( cons ( ( lambda ( x ) ( + 1 x ) ) 2 ) ' ( 4 5 ) ) )

( car ( cdr ' ( 4 ( a b c ) 5 ) ) )
( define a ( car ( cdr ' ( 4 ( a b c ) 5 ) ) ) )

( cons ( define plus1 ( lambda ( x ) ( + 1 x ) ) ) ( plus1 3 ) )
( cons ( define plus1 ( lambda ( x ) ( + 1 x ) ) ) ( plus1 3 ) ' ( 5 6 ) )
( car ( cons ( define plus1 ( lambda ( x ) ( + 1 x ) ) ) ( plus1 3 ) ' ( 5 6 ) ) )

( cons ( ( define plus1 ( lambda ( x ) ( + 1 x ) ) ) ( plus1 3 ) ) ' ( 5 6 ) )
( cons ( ( ) ( plus1 3 ) ) ' ( 5 6 ) )

( cond ( #T ( define plus1 ( lambda ( x ) ( + 1 x ) ) ) ( define x 20190610 ) ( plus1 x ) ) )
( cond ( #T ( define plus1 ( lambda ( x ) ( + 1 x ) ) ) ( define a ( plus1 1 ) ) ( eq? a 1 ) a ) ( ( plus1 1 ) ( define b ( plus1 a ) ) b ) )

( define sum
    ( lambda ( ls )
        ( define head ( car ls ) )
        ( define tail ( cdr ls ) )
        ( cond
            ( ( null? tail ) head )
            ( #T ( + head ( sum tail ) ) ) ) ) )

( define sum ( lambda ( ls ) ( define head ( car ls ) ) ( define tail ( cdr ls ) ) ( cond ( ( null? tail ) head ) ( #T ( + head ( sum tail ) ) ) ) ) ) ) )
